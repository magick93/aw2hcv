---
- hosts: localhost
  connection: local
  gather_facts: no


  vars_files:
    - ../vars/hcv.yml


  tasks:

      # Create the engine that will store the secrets. 
      # We use the cli here because the community.hashi_vault.vault_write module does not support the creation of a new engine
      # And we attempt to make it idempotent by checking if the path is already in use
    - name: Enable KV v2 secrets engine at path "{{ engine_prefix }}"
      command: >
        vault secrets enable -tls-skip-verify -path={{ engine_prefix }} -version=2 kv
      register: vault_enable_result
      failed_when: >
        vault_enable_result.rc != 0 and
        "path is already in use at {{ engine_prefix }}/" not in vault_enable_result.stderr
      changed_when: '"successfully enabled" in vault_enable_result.stdout'

      
   

    # Debug the imported variables
    - name: Import variables from file
      include_vars:
        file: ../vars/hashicorp_vault.yml
        name: hv



    # Debug the item.key values
    - name: Debug loop values
      debug:
        msg: 
          - "Current item.key: {{ item.key }}"
          - "Matched path: {{ vault_paths | selectattr('name', 'equalto', item.key) | list }}"
          - "Available names: {{ vault_paths | map(attribute='name') | list }}"
      with_dict: "{{ hv }}"
      when: item.key in vault_paths | map(attribute='name') | list

    - name: List access policies from Vault
      community.hashi_vault.vault_list:
        url: "{{ vault_url }}"
        path: sys/policies/acl
        validate_certs: "{{ validate_certs }}"
      register: policies

    - name: Display the policy names
      ansible.builtin.debug:
        msg: "{{ policies.data.data['keys'] }}"
        # Note that secret.data.data.keys won't work as 'keys' is a built-in method


    # Try the original task with more verbose output
    - name: Original task with detailed output
      debug:
        msg: 
          - "user_type: {{ item.key }}"
          - "matching paths: {{ vault_paths | selectattr('name', 'equalto', item.key) | list }}"
          - "write_path: {{ (vault_paths | selectattr('name', 'equalto', item.key) | first).write_path }}"
      with_dict: "{{ hv }}"
      when: item.key in vault_paths | map(attribute='name') | list

   


    - name: loop over all files
      include_tasks: ../tasks/hashicorp_vault_write.yml
      vars:
        url: "{{ vault_url }}"
        write_path: "{{ (vault_paths | selectattr('name', 'equalto', hv_item.key) | list).0.write_path }}"
        write_data: "{{ hv_item }}"
        use_certs: "{{ validate_certs }}"
        write_data_key: "{{ (vault_paths | selectattr('name', 'equalto', hv_item.key) | list).0.name }}"
      with_dict: "{{ hv }}"
      when: hv_item.key in vault_paths | map(attribute='name') | list
      loop_control:
        loop_var: hv_item

